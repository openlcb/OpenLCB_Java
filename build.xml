<!-- Ant build.xml file for OpenLCB development -->
<!-- Bob Jacobsen, Copyright 2009 -->
<!-- Revision $Revision: 370 $ -->

<project name="OpenLCB" default="run" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
    <!-- basedir="." means all paths are relative to the "java" subdir. -->

    <description>
        Provides build services for OpenLCB development
    </description>

    <!-- options you might want to change during development,   -->
    <!-- but please change them back before commiting this file -->
  
    <!-- should compiler warn of use of deprecated APIs? (yes/no) -->
    <property name="deprecation" value="no" />
  
    <!-- SDK version -->
    <property name="sdk_version" value="1.8" />
  
    <!-- source code version -->
    <property name="source_version" value="1.8" />
  
    <!-- JRE version -->
    <property name="jre_version" value="1.8" />
    
    <!-- set global properties for this build -->
    <property name="source" value="src"/>
    <property name="test" value="test"/>
    <property name="coveragetarget" value="./coveragereport"/>
    <property name="target" value="classes"/>
    <property name="testreporttarget" value="restreport"/>
    <property name="jartarget" value="."/>
    <property name="doctarget" value="doc"/>
  
    <path id="project.class.path">
        <pathelement location="." />
        <pathelement location="lib/junit-4.12.jar" />
        <pathelement location="lib/xercesImpl.jar" /> <!-- only needed for tests compile and run -->
        <pathelement location="lib/mockito-core-2.2.9-javadoc.jar" /> <!-- only needed for tests compile and run -->
        <pathelement location="lib/mockito-core-2.2.9.jar" /> <!-- only needed for tests compile and run -->
        <pathelement location="lib/hamcrest-core-1.3.jar" /> <!-- only needed for tests compile and run -->
        <pathelement location="lib/hamcrest-library-1.3.jar" /> <!-- only needed for tests compile and run -->
        <pathelement location="lib/byte-buddy-1.5.0.jar" /> <!-- only needed for tests compile and run -->
        <pathelement location="lib/byte-buddy-agent-1.5.0.jar" /> <!-- only needed for tests compile and run -->
        <pathelement location="lib/objenesis-2.4.jar" /> <!-- only needed for tests compile and run -->
        <pathelement location="lib/jdom2-2.0.6.jar" />
        <pathelement location="lib/jlfgr-1_0.jar" />
        <pathelement location="lib/jcip-annotations-1.0.jar" /> <!-- only needed for compile -->
        <pathelement location="lib/jsr305.jar" /> <!-- only needed for compile -->
        <pathelement location="lib/spotbugs-annotations-4.1.2.jar" /> <!-- only needed for compile -->
        <pathelement location="${target}/" />  <!-- last to check for name collisions -->
    </path>

    <!-- Java Code Coverage -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="lib/jacocoant.jar" />
    </taskdef>

    <!-- fileset for the jacoco targets. -->
    <fileset id="jacocofileset" dir="${target}">
        <include name="**/*.class" />
        <!-- Exclude classes necessary for testing only from the code coverage report-->
        <exclude name="**/*Test*.class" />
        <!-- Exclude testing infrastructure classes -->
        <exclude name="**/*Scaffold.class" />
        <exclude name="**/*JUnit*.class" />
        <exclude name="**/*Demo.class" />
        <exclude name="**/*Mock*.class" />
        <exclude name="**/package-info.class" />
        <exclude name="org/openlcb/FakeConnection.class" />
        <exclude name="org/openlcb/cdi/jdom/SampleFactory.class" />
        <exclude name="org/openlcb/FakeOlcbInterface.class" />
        <exclude name="tools/jmri/DecoderDefnToCdi.class" />
        <exclude name="tools/cansim/CanFrame.class" />
        <exclude name="tools/cansim/CanSegment.class" />
        <exclude name="tools/cansim/CanInterface.class" />
        <exclude name="tools/Timed.class" />
        <exclude name="tools/Timer.class" />
        <exclude name="tools/QueueSim*.class" />
        <exclude name="simulations/NodeIDCollisions.class" />
        <exclude name="scenarios/ScenarioRunner*.class" />
        <exclude name="scenarios/TwoBusesFiltered.class" />
        <exclude name="scenarios/ThreeBuses.class" />
        <exclude name="scenarios/NineOnALink.class" />
        <exclude name="scenarios/ConfigDemoApplet*.class" />
        <exclude name="scenarios/BlueGoldCheck*.class" />
        <exclude name="scenarios/TwoBuses.class" />
        <exclude name="scenarios/can/TwoOnASegment.class" />
        <exclude name="scenarios/can/CanScenarios.class" />
        <exclude name="scenarios/can/NineOnASegment.class" />
        <exclude name="scenarios/BlueGoldApplet*.class" />
    </fileset>

    <!-- end of definitions -->

    <!-- target definitions start here -->

    <target name="init" description="create needed directories">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${target}"/>
        <mkdir dir="${target}/resources" />
    </target>

    <target name="clean" description="remove compilation results to force rebuild">
        <mkdir dir="${target}"/>
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${target}"/>
            <fileset dir="${coveragetarget}"/>
            <fileset dir="${testreporttarget}"/>
            <file file="jacoco.exec"/>
            <file file="junit-results.xml"/>
        </delete>
    </target>

    <target name="copyfiles" depends="init" description="copy resource files">
        <copy todir="${target}">
            <fileset dir="src/" includes="**/*.properties"  /> 
        </copy>
    </target>

    <target name="compile" depends="init, copyfiles" description="compile source, omitting tests">
        <!-- Compile the java code from ${source} into ${target} -->
        <javac srcdir="${source}" 
               destdir="${target}" 
               source="${source_version}" 
               target="${jre_version}" 
               fork="true"
               includeantruntime="false"
               memoryinitialsize="256m"
               memorymaximumsize="256m"
               deprecation="${deprecation}"
               debug="yes" >
            <!-- <compilerarg value="-Xlint:{fallthrough,path,finally,-unchecked,-serial} "/> -->
            <!-- <compilerarg value="-Xlint:unchecked" /> -->
            <compilerarg value="-Xmaxerrs"/><compilerarg value="1000"/><!-- change from default 100 errors -->
            <classpath refid="project.class.path"    />
        </javac>
    </target>

    <target name="tests" depends="compile" description="compile test classes">
        <!-- Compile the test java code from ${source} into ${target} -->
        <copy todir="${target}">
            <fileset dir="test/" includes="**/*.properties"  /> 
        </copy>
        <javac srcdir="${test}" 
               destdir="${target}"
               source="${source_version}" 
               target="${jre_version}" 
               fork="true"
               includeantruntime="false"
               memoryinitialsize="256m"
               memorymaximumsize="256m"
               deprecation="${deprecation}"
               debug="yes" >
            <compilerarg value="-Xmaxerrs"/><compilerarg value="1000"/><!-- change from default 100 errors -->
            <classpath refid="project.class.path"    />
        </javac>
    </target>
  
    <target name="run" depends="compile, tests" description="build and run test suite">
        <mkdir dir="${testreporttarget}"/>
        <junit haltonerror="false" haltonfailure="false" showoutput="yes" printsummary="yes" fork="yes" dir="." timeout="3600000" errorProperty="test.failed" failureProperty="test.failed">
            <classpath refid="project.class.path"    />
            <sysproperty key="java.security.policy" value="lib/security.policy"/> 
            <sysproperty key="java.library.path" path=".:lib/"/>       
            <formatter type="xml"/>
	    <batchtest fork="yes" todir="${testreporttarget}" skipNonTests="yes" >
	       <fileset dir="${test}">
                   <include name="**/*Test.java" />
                   <exclude name="**/PackageTest.java" />
                   <exclude name="**/AllTest.java" />
                   <exclude name="**/HeadLessTest.java" />
	       </fileset>
            </batchtest>
        </junit>
        <fail>
            <condition>
                <istrue value="${test.failed}" />
            </condition>
        </fail>
    </target>

    <target name="run-coverage" depends="compile, tests" description="build and run test suite, generating coverage report.">
        <mkdir dir="${testreporttarget}"/>
        <jacoco:coverage destfile="jacoco.exec" excludes="org.slf4j.*">
            <junit haltonerror="false" haltonfailure="false" showoutput="yes" printsummary="withOutAndErr" fork="yes" dir="." timeout="3600000">
                <classpath refid="project.class.path"    />
                <sysproperty key="java.security.policy" value="lib/security.policy"/> 
                <sysproperty key="java.library.path" path=".:lib/"/>       
            <formatter type="xml"/>
	    <batchtest fork="yes" todir="${testreporttarget}" skipNonTests="yes" >
	       <fileset dir="${test}">
                   <include name="**/*.java" />
                   <exclude name="**/PackageTest.java" />
                   <exclude name="**/AllTest.java" />
                   <exclude name="**/HeadLessTest.java" />
	       </fileset>
            </batchtest>
            </junit>
        </jacoco:coverage>
        <jacoco:report>
            <executiondata>
                <file file="jacoco.exec" />
            </executiondata>

            <structure name="AntTestReporting">
                <classfiles>
                    <fileset refid="jacocofileset"/>
                </classfiles>
            </structure>

            <html destdir="${coveragetarget}" />
        </jacoco:report>

    </target>

    <target name="bg" depends="compile, tests" description="build and run Blue/Gold test">
        <java classname="scenarios.BlueGoldCheck"
              dir=".." 
              fork="yes" >
            <classpath refid="project.class.path"    />
            <sysproperty key="java.security.policy" value="lib/security.policy"/> 
            <sysproperty key="java.library.path" path=".:lib/"/>       
        </java>
    </target>


    <target name="javadoc" depends="init" description="create JavaDoc for prototype code, omitting tests">
        <javadoc packagenames="org.*"
                 maxmemory="512m"
                 sourcepath="${source}"
                 overview="src/overview.html"
                 defaultexcludes="yes"
                 destdir="${doctarget}"
                 additionalparam="-breakiterator"
                 author="true"
                 version="false"
                 use="true"
                 failonerror="true"
                 windowtitle="OpenLCB">
            <arg value="-Xdoclint:all,-missing"/> <!-- dropping some 1.8 warnings -->
            <group title="Core" packages="org.openlcb"/>
	  
            <classpath refid="project.class.path"    />
            <doctitle><![CDATA[<h1>OpenLCB API</h1>]]></doctitle>
            <link href="http://java.sun.com/j2se/1.4.1/docs/api/" />
        </javadoc>
    </target>

    <!-- The structure of the following should closely follow the  -->
    <!-- main 'javadoc' target directly above. The only difference -->
    <!-- is the doclet clause referencing the UML generator, the   -->
    <!-- use of the public option in the main task definition, and -->
    <!-- the execution of "dot" at the bottom.                     -->
    <!-- Requires Graphviz from http://www.graphviz.org            -->
    <target name="javadoc-uml" depends="init" description="create JavaDocs with UML">
        <javadoc packagenames="org.*"
                 maxmemory="512m"
                 sourcepath="${source}"
                 overview="${source}/overview.html"
                 destdir="${doctarget}"
                 additionalparam="-breakiterator"
                 author="true"
                 version="false"
                 package="yes"
                 use="true"
                 failonerror="true"
                 windowtitle="OpenLCB API">
            <arg value="-Xdoclint:all,-missing"/> <!-- dropping some 1.8 warnings -->
            <doclet name="org.umlgraph.doclet.UmlGraphDoc"
                    path="lib/UmlGraph-5.7.jar">
                <param name="-attributes"/>
                <param name="-operations"/>
                <param name="-qualify"/>
                <param name="-types"/>
                <!-- <param name="-visibility"/> not used, as only showing public visibility -->
                <param name="-collapsible"/>  <!-- hide images at first on web pages -->
                <param name="-inferdepvis" value="public"/> <!-- only show public -->
            </doclet>

            <classpath refid="project.class.path"/>
            <doctitle><![CDATA[<h1>OpenLCB API</h1>]]></doctitle>
            <bottom><![CDATA[<a href="http://openlcb.org/Copyright.html">Information on copyright, trademarks and licenses is linked here.</a>
                       <br>Site hosted by:
                       <a href="http://sourceforge.net/projects/jmri">
                       <img src="http://sflogo.sourceforge.net/sflogo.php?group_id=26788&type=12" width="120" height="30" border="0" alt="Get JMRI Model Railroad Interface at SourceForge.net. Fast, secure and Free Open Source software downloads"/></a>
                ]]>
            </bottom>
            <link href="http://docs.oracle.com/javase/8/docs/api/"/> 
            <link href="http://download.oracle.com/javase/8/docs/api/"/>
            <link href="http://java.sun.com/products/javacomm/reference/api/"/>
            <link href="http://www.jdom.org/docs/apidocs/"/>
            <link href="http://javacsv.sourceforge.net/"/> <!-- A -->
            <link href="http://fasterxml.github.io/jackson-databind/javadoc/2.0.6"/>
            <link href="http://logging.apache.org/log4j/1.2/apidocs/"/>  
            <!--            <link href="http://java.sun.com/javase/technologies/desktop/java3d/forDevelopers/j3dapi/"/>   failes, so bypassed -->
            <link href="https://jogamp.org/deployment/jogamp-next/javadoc/joal/javadoc/"/>
            <link href="https://commons.apache.org/proper/commons-lang/javadocs/api-release"/>

        </javadoc>
        <apply executable="dot" dest="${doctarget}" parallel="false">
            <arg value="-Tpng"/>
            <arg value="-o"/>
            <targetfile/>
            <srcfile/>
            <fileset dir="${doctarget}" includes="*.dot"/>
            <mapper type="glob" from="*.dot" to="*.png"/>
        </apply>
    </target>

    <target name="javadocall" depends="init" description="create JavaDoc for all code including tests">
        <javadoc packagenames="org.*, tools.*, simulations.*, scenarios.*"
                 maxmemory="512m"
                 sourcepath="${source}:${test}"
                 overview="src/overview.html"
                 defaultexcludes="yes"
                 destdir="${doctarget}"
                 additionalparam="-breakiterator"
                 author="true"
                 version="false"
                 use="true"
                 windowtitle="OpenLCB">
            <arg value="-Xdoclint:all,-missing"/> <!-- dropping some 1.8 warnings -->
            <group title="Core" packages="org.openlcb"/>
	  
            <classpath refid="project.class.path"    />
            <doctitle><![CDATA[<h1>OpenLCB API</h1>]]></doctitle>
            <link href="http://java.sun.com/j2se/1.4.1/docs/api/" />
        </javadoc>
    </target>

    <target name="jars" description="create working jar files with current contents">
        <antcall target="clean" />
        <antcall target="compile" />
        <jar jarfile="${jartarget}/openlcb.jar" 
             basedir="${target}"
             manifest="manifest" 
             compress="true" />   <!-- compress="true" is default -->
        <antcall target="tests" />
        <jar jarfile="${jartarget}/openlcb-demo.jar" 
             basedir="${target}"
             manifest="manifest" 
             compress="true" />   <!-- compress="true" is default -->
    </target>

    <target name="rejar" description="re-create working jar files without clean">
        <antcall target="compile" />
        <jar jarfile="${jartarget}/openlcb.jar" 
             basedir="${target}"
             manifest="manifest" 
             compress="true" />   <!-- compress="true" is default -->
    </target>

    <target name="testrejar" description="re-create working test jar files without clean">
        <antcall target="compile" />
        <jar jarfile="${jartarget}/openlcb.jar" 
             basedir="${target}"
             manifest="manifest" 
             compress="true" />   <!-- compress="true" is default -->
        <antcall target="tests" />
        <jar jarfile="${jartarget}/openlcb-demo.jar" 
             basedir="${target}"
             manifest="manifest" 
             compress="true" />   <!-- compress="true" is default -->
    </target>

</project>


